1. What is Garbage Collection:

	- Objects in the heap are managed by the Java Virtual Machine (JVM) and are subject to automatic garbage collection when they are no longer referenced by the program.
	
	- System.gc();
		- You can explicitly trigger garbage collection, but it's generally not recommended.
		- Calling System.gc() does not guarantee that the finalize() method of objects awaiting finalization will be called immediately.

========================================================================================================================================================

2. Name few algorithms used by Garbage collector?

	- Serial Garbage Collector (Serial GC): This is a simple, single-threaded garbage collector that is suitable for applications with small memory requirements. It uses a "stop-the-world" approach, where all application threads are paused during garbage collection.

	- Parallel Garbage Collector (Parallel GC): Also known as the throughput collector, it uses multiple threads to perform garbage collection, making it suitable for multi-core processors. It also stops application threads during collection but is designed for applications where high throughput is more important than low-latency.

	- G1 (Garbage First) Garbage Collector ( Defualt ): G1 is a widely used garbage collector that provides a good balance between low-latency and high throughput. It is known for its ability to handle large heap sizes efficiently and has become the default collector in some Java versions. G1 divides the heap into regions and collects garbage from the regions with the least live objects, which can help maintain low pause times.

	- Z Garbage Collector (ZGC): ZGC is a low-latency garbage collector introduced in recent Java versions (JDK 11+). It is designed to keep pause times consistently low, even for very large heaps, making it an excellent choice for applications that require minimal disruption due to garbage collection pauses. ZGC performs most of its work concurrently and is well-suited for applications with stringent latency requirements.
	
	- to modify: java -XX:+UseG1GC -jar YourApplication.jar


========================================================================================================================================================

3. What are the different ways to make an object eligible for GC when it is no longer needed??

	1) Set all available object references to null 
	2) Make the reference variable to refer to another object 

========================================================================================================================================================

4. What is the purpose of overriding finalize() method?

	- Finalize method in Java also called finalizer is a method defined in java.lang.Object 
	- Its called by Garbage collector just before collecting any object which is eligible for GC. 
	- Thus Finalize() method provides last chance to object to do cleanup and free any remaining resource

========================================================================================================================================================

5. Islands of Isolation?

	- "Islands of Isolation" in the context of Java Garbage Collection refers to objects that are no longer reachable by the application but are still referenced by each other, creating a cycle of objects that cannot be collected by the garbage collector. 
	
========================================================================================================================================================

6. daemon thread in garbage collection.


========================================================================================================================================================