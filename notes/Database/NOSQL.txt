1. SQL vs NoSQL:

	- Data Model: NoSQL databases allows data models like document, key-value, wide-column, or graph, allowing for more varied data storage.
	- Scalability: SQL is vertical scaling ( CPU, RAM, or storage ), whereas NoSQL is horizontal scaling ( multiple servers or nodes ).
	- ACID vs. BASE: SQL follow the ACID (Atomicity, Consistency, Isolation, Durability) , where NOSQL - BASE (Basically Available, Soft state, Eventually consistent) 
	- Rollback: SQL supports rollback, whereas NoSQL doesn't.
	
========================================================================================================================================================

2. Examples of NOSQL database?

	- MongoDB
	- Redis Inmemory database

========================================================================================================================================================

3. BASE Property meaning


========================================================================================================================================================

4. Advantages of Redis Cache:

	- In-Memory Storage: Redis stores data in-memory, enabling extremely fast read and write operations. This is particularly advantageous for caching purposes where quick access to frequently accessed data is crucial.
	- High Performance: Redis is designed for high-performance scenarios. It can handle a large number of transactions per second, making it well-suited for applications that require low-latency responses.
	- Data Structures: Redis supports various data structures such as strings, hashes, lists, sets, and more. This versatility allows developers to model complex data in a way that is optimized for their specific use cases.
	- Key-Value Store: Redis operates as a simple key-value store, making it easy to understand and use. This simplicity is beneficial for caching scenarios where you need to quickly store and retrieve data based on keys.
	- Persistence Options: While Redis is an in-memory store, it offers persistence options, allowing data to be saved to disk. This feature is useful for scenarios where you want to recover cached data after a restart.
	- Publish/Subscribe Mechanism: Redis provides a publish/subscribe mechanism, allowing applications to broadcast messages to multiple subscribers. This is useful for building real-time applications and updating caches when data changes.
	- Partitioning and Sharding: Redis supports partitioning and sharding, enabling horizontal scaling. This allows you to distribute data across multiple Redis instances, providing both performance and capacity benefits.
	- Flexible Expiration Policies: Redis allows you to set expiration times for keys, enabling automatic eviction of data that is no longer needed. This is useful for managing cache size and ensuring freshness of data.

========================================================================================================================================================