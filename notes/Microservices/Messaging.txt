1. use of groupId/consumer group in kafka?

	- When you use the same groupId for multiple Kafka consumers, Kafka treats them as part of the same consumer group. This allows you to achieve parallelism and load balancing by having each consumer within the group subscribe to and process messages from different partitions of the same topic.
	
	- If they have different groupIds, they will be treated as distinct consumer groups, and Kafka will handle partition assignment, offset management, and other aspects separately for each group. This can lead to multiple consumers independently consuming the same topic.
	
========================================================================================================================================================

2. Queue vs Kafka:

	- Queue - every message is consumed by only one consumer.
	- Kafka - every message can be consumed by multiple consumer groups.
	
	- kafka maintains the order in which messages are stored in partitions
	- queue doesn't guarantee the order in case of any failures.
	
	- once message is ready, it will be cleared from the queue
	- kafka stores the message, by using the offset we can read the messages once again.
	
========================================================================================================================================================

3. Advantages of using partitions in kafka?

	- Partitions allow Kafka to distribute the load and data across multiple brokers and storage servers. 
	- Each partition can be placed on a different server, enabling Kafka to handle more data and clients.
	- Multiple consumers can subscribe to different partitions of a topic, allowing them to process messages concurrently.
	- Kafka's partitioning mechanism helps balance the load across brokers and consumers. 
	- Each partition can have one or more replicas, and each replica is stored on a different broker. If a broker fails, another replica can take over. 

========================================================================================================================================================

4. What is Kafka replica and its usages?

	- In Apache Kafka, a replica refers to a copy of a partition of a topic. Kafka is designed to be a distributed and fault-tolerant messaging system, and replication is a key feature that contributes to its durability and availability.
	
	- Advantages:
		- To ensure fault tolerance, each partition can have multiple replicas. Replicas are copies of the same partition that are stored on different broker nodes.
		- Among the replicas of a partition, one is designated as the leader, and the others are followers. The leader is responsible for handling all reads and writes for the partition, while followers replicate the data from the leader.
		- Replication provides durability by ensuring that if a broker node fails, another node can take over as the leader, and the data is not lost. It also improves availability since clients can read from any of the replicas.
		- In Kafka, not all replicas are necessarily in sync with the leader at any given time. Kafka maintains a set of In-Sync Replicas (ISR), which are replicas that are caught up with the leader's log. This ensures that there is a sufficient number of replicas that have received and acknowledged the data.
		- The number of replicas for a partition is configured by setting the replication factor when creating the topic. The replication factor determines how many copies of each partition should be maintained.

========================================================================================================================================================

5. What is an offset in Kafka?

	- In Apache Kafka, an offset is a position marker or unique identifier that represents the position of a consumer in a particular partition of a Kafka topic. 
	- Each message within a partition has a corresponding offset, and Kafka uses offsets to keep track of the progress of consumers. 
	- Understanding and managing offsets is crucial for achieving fault tolerance, at-least-once message delivery semantics, and efficient data processing.
	
========================================================================================================================================================