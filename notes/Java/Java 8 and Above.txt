1. Features of Java 9 and Above:

Latest stable version is Java 21.

Java 9 - 

Immutable Collection. List.of(), Set.of(), Map.of()
UnsupportedOperationException - will be thrown when we modify it.
NullPointerException - when we add null elements.

Java 10 - 

Immutable Collection. List.copyOf(list); - creates a immutable collection from a mutable collection.
UnsupportedOperationException - will be thrown when we modify it.
NullPointerException - when we add null elements.

Local-Variable Type Inference (var):
var list = new ArrayList<String>();

Java 12 -

Switch Expressions: Use switch as an expression rather than a statement, making code more concise.

Java 13 -

Text Blocks: Text blocks will simplify the part of writing multiline strings.

Java 14 -

Records (Preview Feature): 
- Concise way to declare classes that are mainly used for data storage.
- They automatically generate methods like constructors, equals(), hashCode(), and toString().
- Records ensure that the data they encapsulate is immutable, meaning once created, their values cannot be changed. 

Pattern Matching for instanceof (Preview Feature): Pattern matching for instanceof simplifies code for type checking and casting.


Java 15 -

Sealed classes:
- Allows you to control which classes can extend or implement them. 
- This feature helps enhance code security and maintainability by restricting the hierarchy of related classes.

------------------------------------------------------------------------------------------------------------------------------------------------------
2. @Value vs record:

@Value (from Project Lombok):
 - @Value is not part of the standard Java language; it's a feature provided by Project Lombok, a third-party library. 
 - @Value is used to generate immutable classes with getters, equals, hashCode, and toString methods without writing the boilerplate code yourself.
 - You can customize the generated methods by using additional Lombok annotations.
 
record (Java language feature):
 - You don't need any third-party libraries or dependencies; it's part of the Java language itself.
 - It automatically generates constructors, equals(), hashCode(), and toString() methods based on the components (fields) you define in the record.
 - While you can't customize the generated methods, you can add your methods, constants, or interfaces to a record.
 
------------------------------------------------------------------------------------------------------------------------------------------------------

3. final vs non-sealed vs sealed class

Sealed classes:
- Allows you to control which classes can extend or implement them. 
- This feature helps enhance code security and maintainability by restricting the hierarchy of related classes.

final Class:
- A final class is the most restrictive in terms of inheritance. It cannot be extended; you cannot create subclasses of a final class.

non-sealed Class:
- A non-sealed class allows you to create subclasses, but it does not impose any restrictions on who can create subclasses or where they can be located in the codebase.

------------------------------------------------------------------------------------------------------------------------------------------------------

4. Use of optional:

- used to do null check in a more structured way.
- It is always a good practise to bound the response with Optional.of() when method may return null. In case of null we can go ahead with Optional.empty().
- some stream api methods such as findFirst(), findAny(), etc.., will return its response bounded with Optional
- Also the spring data jpa returns its responses bounded with optional keyword.

------------------------------------------------------------------------------------------------------------------------------------------------------

5. Difference between optional.of and optional.ofNullable 

	- If you try to create an Optional.of with a null value, it will throw a NullPointerException at runtime.
	- Optional<String> optionalNull = Optional.of(nullValue); // This line will throw NullPointerException
	
	- If the provided value is null, Optional.ofNullable will create an empty Optional without throwing an exception.
	- Optional<String> optionalNull = Optional.ofNullable(nullValue); // Valid, creates an empty Optional

------------------------------------------------------------------------------------------------------------------------------------------------------

6. intermediate vs terminal? Is intermediate eager or lazy loaded? Is terminal eager or lazy loaded?

Intermediate Operations:

- filter(), map(), flatMap(), sorted(), peek()
- lazy-loaded, it requires terminal operations to be executed.

Terminal Operations:

- forEach(), collect(), min(), max(), count()
- eager loaded, it is applied over intermediate to produce a result.

------------------------------------------------------------------------------------------------------------------------------------------------------

7. @Valid vs @Validated:

@Valid: used for bean validations and part of jakarta.validation library.
@Validated: is part of the Spring Framework and is used for method-level validation 

Example:
@Service
@Validated
public class MyService {
    public void process(@NotBlank String data) {
        // ...
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------

8. Examples of some predefined functional interfaces:

	Consumer<T>: (used in list.foreach())
	 - Represents an operation that takes an input argument of type T and returns no result.
	 - Example: Consumer<String> printUpperCase = str -> System.out.println(str.toUpperCase());

	Supplier<T>: (used in orElseGet() which is part of optional)
	 - It does not take any input but produces a result of type T.
	 - Example: Supplier<Integer> getRandomNumber = () -> new Random().nextInt();

	Function<T, R>: (used in stream().map())
	 - Represents a function that takes an input of type T and produces a result of type R.
	 - Example: Function<String, Integer> strLength = str -> str.length();
	 
	Predicate<T>: ((used in stream().filter())
	 - Represents a predicate (boolean-valued function) that takes an input of type T.
	 - Example: Predicate<Integer> isEven = num -> num % 2 == 0;
	 
------------------------------------------------------------------------------------------------------------------------------------------------------

9. stream() vs parallelStream():

stream(): This method returns a sequential stream, which means that the operations performed on the stream are executed in a single thread, one after the other.

parallelStream(): This method returns a parallel stream, which means that the operations performed on the stream can be executed concurrently in multiple threads. It takes advantage of multi-core processors to potentially speed up the processing of elements in a collection.

------------------------------------------------------------------------------------------------------------------------------------------------------

10. peek() vs map():

	- to perform a void operation similar to foreach, we can go for peek()
	- to return or modify a specific field and return the field from the collection, then we can go for map.
	- map() uses function interface to return something
	- peek() uses consumer interface and it won't return anything
	
------------------------------------------------------------------------------------------------------------------------------------------------------
11. types of streams in java8:

	- sequential stream
	- parallel stream
	- IntStream, LongStream, etc..,

------------------------------------------------------------------------------------------------------------------------------------------------------
	
12. What is method references in java 8.

	- basically a compact and easy form of the lambda expression.
	- When a method is just going to take a parameter and nothing else we can go for method references

------------------------------------------------------------------------------------------------------------------------------------------------------

13. toArray(), peek(), distinct()

	- The toArray() method is used to convert the elements of a stream into an array.
	- The peek() method is an intermediate operation that allows you to perform an action on each element of the stream without changing the elements themselves.
	- The distinct() method is an intermediate operation that returns a stream consisting of the distinct elements of the stream.

------------------------------------------------------------------------------------------------------------------------------------------------------